<?php
/*
Gibbon, Flexible & Open School System
Copyright (C) 2010, Ross Parker

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

namespace Gibbon\View;

use Gibbon\View\AssetBundle;

/**
 * Holds the details for rendering the current page.
 *
 * @version v17
 * @since   v17
 */
class Page
{
    /**
     * After constructing these class properties are publicly read-only.
     */
    protected $title;
    protected $address;
    protected $action;
    protected $module;
    protected $theme;

    /**
     * These properties can be modified during the runtime of a script, 
     * and will be output at the end during template rendering.
     */
    protected $stylesheets;
    protected $scripts;
    protected $alerts = ['error' => [], 'warning' => [], 'message' => []];
    protected $extra = ['head' => [], 'foot' => [], 'sidebar' => []];

    /**
     * Create a new page from a variable set of constructor params.
     *
     * @param array $params
     */
    public function __construct($params = [])
    {
        $this->stylesheets = new AssetBundle();
        $this->scripts = new AssetBundle();

        // Merge constructor params into class properties
        foreach ($params as $key => $value) {
            if (property_exists($this, $key)) {
                $this->$key = $value;
            }
        }
    }

    /**
     * Get the HTML page title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Get the current page address (?q=)
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Get the action instance for the current page.
     *
     * @return Action
     */
    public function getAction()
    {
        return $this->action;
    }

    /**
     * Get the module instance for the current page.
     *
     * @return Module
     */
    public function getModule()
    {
        return $this->module;
    }

    /**
     * Get the theme instance for the current page.
     *
     * @return Theme
     */
    public function getTheme()
    {
        return $this->theme;
    }

    /**
     * Get an array of all stylesheet asset used by this page (system, module & theme).
     *
     * @return array
     */
    public function getAllStylesheets($context = null)
    {
        $stylesheets = $this->stylesheets()->getAssets($context);

        if (!empty($this->getModule())) {
            $stylesheets = array_replace($stylesheets, $this->getModule()->stylesheets()->getAssets($context));
        }

        if (!empty($this->getTheme())) {
            $stylesheets = array_replace($stylesheets, $this->getTheme()->stylesheets()->getAssets($context));
        }

        return $stylesheets;
    }

    /**
     * Get an array of all script assets used by this page (system, module & theme).
     *
     * @param string $context  Optionally filter by context.
     * @return array
     */
    public function getAllScripts($context = null)
    {
        $scripts = $this->scripts()->getAssets($context);

        if (!empty($this->getModule())) {
            $scripts = array_replace($scripts, $this->getModule()->scripts()->getAssets($context));
        }

        if (!empty($this->getTheme())) {
            $scripts = array_replace($scripts, $this->getTheme()->scripts()->getAssets($context));
        }

        return $scripts;
    }

    /**
     * Add user feedback as an error message displayed on this page.
     *
     * @param string $text
     */
    public function addError($text)
    {
        $this->alerts['error'][] = $text;
    }

    /**
     * Add user feedback as a warning message displayed on this page.
     *
     * @param string $text
     */
    public function addWarning($text)
    {
        $this->alerts['warning'][] = $text;
    }

    /**
     * Add user feedback as an info message displayed on this page.
     *
     * @param string $text
     */
    public function addMessage($text)
    {
        $this->alerts['message'][] = $text;
    }

    /**
     * Get all alerts generated by this page, optionally by context.
     *
     * @param string $context  Contexts: error, warning, message, code
     * @param string $text
     * @return array
     */
    public function getAlerts($context = null)
    {
        return !empty($context) 
            ? $this->alerts[$context] 
            : $this->alerts;
    }

    /**
     * Add a section of raw HTML to the HEAD tag.
     *
     * @param string $code
     */
    public function addHeadExtra($code)
    {
        $this->extra['head'][] = $code;
    }

    /**
     * Add a section of raw HTML to bottom of the BODY tag.
     *
     * @param string $code
     */
    public function addFootExtra($code)
    {
        $this->extra['foot'][] = $code;
    }

    /**
     * Add a section of raw HTML to the page sidebar.
     *
     * @param string $code
     */
    public function addSidebarExtra($code)
    {
        $this->extra['sidebar'][] = $code;
    }

    /**
     * Get all raw HTML code sections by context.
     *
     * @param string $context  Contexts: head, foot, sidebar
     * @return array
     */
    public function getExtraCode($context)
    {
        return !empty($context) 
            ? $this->extra[$context] 
            : $this->extra;
    }

    /**
     * Returns the collection of stylesheets used by this page.
     *
     * @return AssetBundle
     */
    public function stylesheets()
    {
        return $this->stylesheets;
    }

    /**
     * Returns the collection of scripts used by this page.
     *
     * @return AssetBundle
     */
    public function scripts()
    {
        return $this->scripts;
    }
}
