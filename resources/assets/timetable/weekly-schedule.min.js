if (!Util) function Util() { }
if (
    ((Util.addClass = function (t, e) {
        var s = e.split(" ");
        t.classList.add(s[0]), 1 < s.length && Util.addClass(t, s.slice(1).join(" "));
    }),
        (Util.removeClass = function (t, e) {
            var s = e.split(" ");
            t.classList.remove(s[0]), 1 < s.length && Util.removeClass(t, s.slice(1).join(" "));
        }),
        (Util.addClass = function (t, e) {
            var s = e.split(" ");
            t.classList.add(s[0]), 1 < s.length && Util.addClass(t, s.slice(1).join(" "));
        }),
        (Util.toggleClass = function (t, e, s) {
            s ? Util.addClass(t, e) : Util.removeClass(t, e);
        }),
        (Util.setAttributes = function (t, e) {
            for (var s in e) t.setAttribute(s, e[s]);
        }),
        (Util.hasClass = function (t, e) {
            return t.classList.contains(e);
        }),
        (Util.getChildrenByClassName = function (t, e) {
            for (var s = t.children, i = [], l = 0; l < s.length; l++) Util.hasClass(s[l], e) && i.push(s[l]);
            return i;
        }),
        (Util.getIndexInArray = function (t, e) {
            return Array.prototype.indexOf.call(t, e);
        }),
        (function () {
            var t = function (t) {
                (this.element = t),
                    (this.tabList = this.element.getElementsByClassName("js-tabs__controls")[0]),
                    (this.listItems = this.tabList.getElementsByTagName("li")),
                    (this.triggers = this.tabList.getElementsByTagName("a")),
                    (this.panelsList = this.element.getElementsByClassName("js-tabs__panels")[0]),
                    (this.panels = Util.getChildrenByClassName(this.panelsList, "js-tabs__panel")),
                    (this.hideClass = this.element.getAttribute("data-hide-panel-class") ? this.element.getAttribute("data-hide-panel-class") : "hide"),
                    (this.customShowClass = !!this.element.getAttribute("data-show-panel-class") && this.element.getAttribute("data-show-panel-class")),
                    (this.layout = this.element.getAttribute("data-tabs-layout") ? this.element.getAttribute("data-tabs-layout") : "horizontal"),
                    (this.deepLinkOn = "on" == this.element.getAttribute("data-deep-link")),
                    this.initTab();
            };
            (t.prototype.initTab = function () {
                this.tabList.setAttribute("role", "tablist"), Util.addClass(this.element, "tabs--no-interaction");
                var de = this.tabList.querySelector('[aria-selected="true"]'),
                    d = Util.getIndexInArray(this.triggers, de);
                if (d == -1 || d >= this.listItems.length) {
                    d = 0;
                }

                for (var t = 0; t < this.triggers.length; t++) {
                    var e = 0 == t, s = this.panels[t].getAttribute("id");
                    this.listItems[t].setAttribute("role", "presentation"),
                        Util.setAttributes(this.triggers[t], { role: "tab", "aria-selected": e, "aria-controls": s, id: "tab-" + s }),
                        Util.addClass(this.triggers[t], "js-tabs__trigger"),
                        Util.setAttributes(this.panels[t], { role: "tabpanel", "aria-labelledby": "tab-" + s }),
                        Util.toggleClass(this.panels[t], this.hideClass, !e),
                        e && this.customShowClass && Util.addClass(this.panels[t], this.customShowClass),
                        e || this.triggers[t].setAttribute("tabindex", "-1");

                }

                this.triggerTab(this.triggers[d]);
                this.triggers[d].focus();

                this.initTabEvents(), this.initDeepLink();
            }),
                (t.prototype.initTabEvents = function () {
                    var n = this;
                    this.tabList.addEventListener("click", function (t) {
                        t.target.closest(".js-tabs__trigger") && n.triggerTab(t.target.closest(".js-tabs__trigger"), t);
                    }),
                        this.tabList.addEventListener("keydown", function (t) {
                            var e, s, i, l;
                            t.target.closest(".js-tabs__trigger") &&
                                ((i = t),
                                    ("horizontal" == (l = n.layout) && ((i.keyCode && 39 == i.keyCode) || (i.key && "ArrowRight" == i.key))) || ("vertical" == l && ((i.keyCode && 40 == i.keyCode) || (i.key && "ArrowDown" == i.key)))
                                        ? (t.preventDefault(), n.selectNewTab("next"))
                                        : ((e = t),
                                            (("horizontal" == (s = n.layout) && ((e.keyCode && 37 == e.keyCode) || (e.key && "ArrowLeft" == e.key))) || ("vertical" == s && ((e.keyCode && 38 == e.keyCode) || (e.key && "ArrowUp" == e.key)))) &&
                                            (t.preventDefault(), n.selectNewTab("prev"))));
                        });
                }),
                (t.prototype.selectNewTab = function (t) {
                    var e = this.tabList.querySelector('[aria-selected="true"]'),
                        s = Util.getIndexInArray(this.triggers, e);
                    (s = "next" == t ? s + 1 : s - 1) < 0 && (s = this.listItems.length - 1), s >= this.listItems.length && (s = 0), this.triggerTab(this.triggers[s]), this.triggers[s].focus();
                }),
                (t.prototype.triggerTab = function (t, e) {
                    e && e.preventDefault();
                    var s = Util.getIndexInArray(this.triggers, t);
                    if ("true" != this.triggers[s].getAttribute("aria-selected")) {
                        Util.removeClass(this.element, "tabs--no-interaction");
                        for (var i = 0; i < this.triggers.length; i++) {
                            var l = i == s;
                            Util.toggleClass(this.panels[i], this.hideClass, !l),
                                this.customShowClass && Util.toggleClass(this.panels[i], this.customShowClass, l),
                                this.triggers[i].setAttribute("aria-selected", l),
                                l ? this.triggers[i].setAttribute("tabindex", "0") : this.triggers[i].setAttribute("tabindex", "-1");
                        }
                        this.deepLinkOn && history.replaceState(null, "", "#" + t.getAttribute("aria-controls"));
                    }
                }),
                (t.prototype.initDeepLink = function () {
                    if (this.deepLinkOn) {
                        var t = window.location.hash.substr(1),
                            e = this;
                        if (t && "" != t)
                            for (var s = 0; s < this.panels.length; s++)
                                if (this.panels[s].getAttribute("id") == t) {
                                    this.triggerTab(this.triggers[s], !1),
                                        setTimeout(function () {
                                            e.panels[s].scrollIntoView(!0);
                                        });
                                    break;
                                }
                    }
                }),
                (window.Tab = t);
            var e = document.getElementsByClassName("js-tabs");
            if (0 < e.length) for (var s = 0; s < e.length; s++) new t(e[s]);
        })(),
        !Util)
)
    function Util() { }
if (
    ((Util.hasClass = function (t, e) {
        return t.classList.contains(e);
    }),
        (Util.addClass = function (t, e) {
            var s = e.split(" ");
            t.classList.add(s[0]), 1 < s.length && Util.addClass(t, s.slice(1).join(" "));
        }),
        (Util.removeClass = function (t, e) {
            var s = e.split(" ");
            t.classList.remove(s[0]), 1 < s.length && Util.removeClass(t, s.slice(1).join(" "));
        }),
        (function () {
            var t = function (t) {
                (this.element = t),
                    (this.triggers = document.querySelectorAll('[aria-controls="' + this.element.getAttribute("id") + '"]')),
                    (this.firstFocusable = null),
                    (this.lastFocusable = null),
                    (this.moveFocusEl = null),
                    (this.modalFocus = this.element.getAttribute("data-modal-first-focus") ? this.element.querySelector(this.element.getAttribute("data-modal-first-focus")) : null),
                    (this.selectedTrigger = null),
                    (this.preventScrollEl = this.getPreventScrollEl()),
                    (this.showClass = "modal--is-visible"),
                    this.initModal();
            };
            function s(t) {
                return t.offsetWidth || t.offsetHeight || t.getClientRects().length;
            }
            (t.prototype.getPreventScrollEl = function () {
                var t = !1,
                    e = this.element.getAttribute("data-modal-prevent-scroll");
                return e && (t = document.querySelector(e)), t;
            }),
                (t.prototype.initModal = function () {
                    var e = this;
                    if (this.triggers)
                        for (var t = 0; t < this.triggers.length; t++)
                            this.triggers[t].addEventListener("click", function (t) {
                                t.preventDefault(), Util.hasClass(e.element, e.showClass) ? e.closeModal() : ((e.selectedTrigger = t.currentTarget), e.showModal(), e.initModalEvents());
                            });
                    this.element.addEventListener("openModal", function (t) {
                        t.detail && (e.selectedTrigger = t.detail), e.showModal(), e.initModalEvents();
                    }),
                        this.element.addEventListener("closeModal", function (t) {
                            t.detail && (e.selectedTrigger = t.detail), e.closeModal();
                        }),
                        Util.hasClass(this.element, this.showClass) && this.initModalEvents();
                }),
                (t.prototype.showModal = function () {
                    var s = this;
                    Util.addClass(this.element, this.showClass),
                        this.getFocusableElements(),
                        this.moveFocusEl &&
                        (this.moveFocusEl.focus(),
                            this.element.addEventListener("transitionend", function t(e) {
                                s.moveFocusEl.focus(), s.element.removeEventListener("transitionend", t);
                            })),
                        this.emitModalEvents("modalIsOpen"),
                        this.preventScrollEl && (this.preventScrollEl.style.overflow = "hidden");
                }),
                (t.prototype.closeModal = function () {
                    Util.hasClass(this.element, this.showClass) &&
                        (Util.removeClass(this.element, this.showClass),
                            (this.firstFocusable = null),
                            (this.lastFocusable = null),
                            (this.moveFocusEl = null),
                            this.selectedTrigger && this.selectedTrigger.focus(),
                            this.cancelModalEvents(),
                            this.emitModalEvents("modalIsClose"),
                            this.preventScrollEl && (this.preventScrollEl.style.overflow = ""));
                }),
                (t.prototype.initModalEvents = function () {
                    this.element.addEventListener("keydown", this), this.element.addEventListener("click", this);
                }),
                (t.prototype.cancelModalEvents = function () {
                    this.element.removeEventListener("keydown", this), this.element.removeEventListener("click", this);
                }),
                (t.prototype.handleEvent = function (t) {
                    switch (t.type) {
                        case "click":
                            this.initClick(t);
                        case "keydown":
                            this.initKeyDown(t);
                    }
                }),
                (t.prototype.initKeyDown = function (t) {
                    (t.keyCode && 9 == t.keyCode) || (t.key && "Tab" == t.key)
                        ? this.trapFocus(t)
                        : ((t.keyCode && 13 == t.keyCode) || (t.key && "Enter" == t.key)) && t.target.closest(".js-modal__close") && (t.preventDefault(), this.closeModal());
                }),
                (t.prototype.initClick = function (t) {
                    (t.target.closest(".js-modal__close") || Util.hasClass(t.target, "js-modal")) && (t.preventDefault(), this.closeModal());
                }),
                (t.prototype.trapFocus = function (t) {
                    this.firstFocusable == document.activeElement && t.shiftKey && (t.preventDefault(), this.lastFocusable.focus()),
                        this.lastFocusable != document.activeElement || t.shiftKey || (t.preventDefault(), this.firstFocusable.focus());
                }),
                (t.prototype.getFocusableElements = function () {
                    var t = this.element.querySelectorAll(l);
                    this.getFirstVisible(t), this.getLastVisible(t), this.getFirstFocusable();
                }),
                (t.prototype.getFirstVisible = function (t) {
                    for (var e = 0; e < t.length; e++)
                        if (s(t[e])) {
                            this.firstFocusable = t[e];
                            break;
                        }
                }),
                (t.prototype.getLastVisible = function (t) {
                    for (var e = t.length - 1; 0 <= e; e--)
                        if (s(t[e])) {
                            this.lastFocusable = t[e];
                            break;
                        }
                }),
                (t.prototype.getFirstFocusable = function () {
                    if (this.modalFocus && Element.prototype.matches)
                        if (this.modalFocus.matches(l)) this.moveFocusEl = this.modalFocus;
                        else {
                            this.moveFocusEl = !1;
                            for (var t = this.modalFocus.querySelectorAll(l), e = 0; e < t.length; e++)
                                if (s(t[e])) {
                                    this.moveFocusEl = t[e];
                                    break;
                                }
                            this.moveFocusEl || (this.moveFocusEl = this.firstFocusable);
                        }
                    else this.moveFocusEl = this.firstFocusable;
                }),
                (t.prototype.emitModalEvents = function (t) {
                    var e = new CustomEvent(t, { detail: this.selectedTrigger });
                    this.element.dispatchEvent(e);
                }),
                (window.Modal = t);
            var e,
                i = document.getElementsByClassName("js-modal"),
                l = '[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]), [contenteditable], audio[controls], video[controls], summary';
            if (0 < i.length) {
                for (var n = [], a = 0; a < i.length; a++) (e = a), n.push(new t(i[e]));
                window.addEventListener("keydown", function (t) {
                    if ((t.keyCode && 27 == t.keyCode) || (t.key && "escape" == t.key.toLowerCase())) for (var e = 0; e < n.length; e++) n[e].closeModal();
                });
            }
        })(),
        !Util)
)
    function Util() { }
(Util.addClass = function (t, e) {
    var s = e.split(" ");
    t.classList.add(s[0]), 1 < s.length && Util.addClass(t, s.slice(1).join(" "));
}),
    (Util.removeClass = function (t, e) {
        var s = e.split(" ");
        t.classList.remove(s[0]), 1 < s.length && Util.removeClass(t, s.slice(1).join(" "));
    }),
    (Util.addClass = function (t, e) {
        var s = e.split(" ");
        t.classList.add(s[0]), 1 < s.length && Util.addClass(t, s.slice(1).join(" "));
    }),
    (Util.toggleClass = function (t, e, s) {
        s ? Util.addClass(t, e) : Util.removeClass(t, e);
    }),
    (Util.extend = function () {
        var s = {},
            i = !1,
            t = 0,
            e = arguments.length;
        "[object Boolean]" === Object.prototype.toString.call(arguments[0]) && ((i = arguments[0]), t++);
        for (
            var l = function (t) {
                for (var e in t) Object.prototype.hasOwnProperty.call(t, e) && (i && "[object Object]" === Object.prototype.toString.call(t[e]) ? (s[e] = extend(!0, s[e], t[e])) : (s[e] = t[e]));
            };
            t < e;
            t++
        ) {
            l(arguments[t]);
        }
        return s;
    }),
    (Util.osHasReducedMotion = function () {
        if (!window.matchMedia) return !1;
        var t = window.matchMedia("(prefers-reduced-motion: reduce)");
        return !!t && t.matches;
    }),
    (Math.easeOutQuart = function (t, e, s, i) {
        return (t /= i), -s * (--t * t * t * t - 1) + e;
    }),
    (function () {
        var i = function (t) {
            var s, e;
            (this.options = Util.extend(i.defaults, t)),
                (this.element = this.options.element),
                (this.timeline = this.element.getAttribute("data-w-schedule-timeline")),
                (this.startTime = r(this.timeline.split("-")[0])),
                (this.endTime = r(this.timeline.split("-")[1])),
                (this.gridRows = 1),
                (this.grid = this.element.getElementsByClassName("js-w-schedule__grid")),
                (this.halfHourGrid = '<div class="w-schedule__grid-row"></div>'),
                (this.hourGrid = '<div class="w-schedule__grid-row"><span class="w-schedule__grid-row-label">XXXX</span></div>'),
                (this.animationDuration = 1e3 * parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--w-schedule-modal-anim-duration")) || 300),
                (this.modal = document.getElementsByClassName("js-w-schedule-modal")),
                (this.morphBg = document.getElementsByClassName("js-w-schedule-morph-bg")),
                (this.modalCloseBtn = document.getElementsByClassName("js-w-schedule-close-btn")),
                (function (t) {
                    var e = "";
                    0 != t.startTime[1] && ((e += t.halfHourGrid), (t.startTime[0] = t.startTime[0] + 1), (t.gridRows = t.gridRows + 1));
                    for (var s = t.endTime[0] - t.startTime[0], i = 0; i < s; i++) e = e + n(t, i) + t.halfHourGrid;
                    (e += n(t, s)), (t.gridRows = t.gridRows + 2 * s), 0 != t.endTime[1] && ((e += t.halfHourGrid), (t.gridRows = t.gridRows + 1)), (t.grid[0].innerHTML = e), t.element.style.setProperty("--w-schedule-row-nr", t.gridRows);
                })((e = this)),
                (function (t) {
                    for (var e = t.element.getElementsByClassName("js-w-schedule__event"), s = 0; s < e.length; s++) l(t, e[s]);
                })(e),
                (s = e).modal.length < 1 ||
                s.morphBg.length < 1 ||
                ((s.modalContent = s.modal[0].getElementsByClassName("js-w-schedule-modal__content")[0]),
                    (s.skeletonContent = s.modalContent.innerHTML),
                    (s.modalId = s.modal[0].getAttribute("id")),
                    s.modal[0].addEventListener("modalIsOpen", function (t) {
                        var e;
                        (s.target = t.detail.closest('[aria-controls="' + s.modalId + '"]')),
                            (function (a, o) {
                                if (f) return o();
                                var t = a.target.getBoundingClientRect(),
                                    e = a.modalContent.getBoundingClientRect(),
                                    r = e.left - t.left,
                                    d = e.top - t.top,
                                    h = t.width / e.width,
                                    c = t.height / e.height,
                                    u = null,
                                    m = a.animationDuration;
                                (a.morphBg[0].style = "top: " + t.top + "px; left: " + t.left + "px; width: " + e.width + "px; height: " + e.height + "px; transform: scaleX(" + h + ") scaleY(" + c + ")"),
                                    Util.removeClass(a.morphBg[0], "hide");
                                var g = function (t) {
                                    u || (u = t);
                                    var e = t - u;
                                    m < e && (e = m);
                                    var s = Math.easeOutQuart(e, h, 1 - h, m),
                                        i = Math.easeOutQuart(e, c, 1 - c, m),
                                        l = Math.easeOutQuart(e, 0, r, m),
                                        n = Math.easeOutQuart(e, 0, d, m);
                                    (a.morphBg[0].style.transform = "translateX(" + l + "px) translateY(" + n + "px) scaleX(" + s + ") scaleY(" + i + ")"), e < m ? window.requestAnimationFrame(g) : o && o();
                                };
                                window.requestAnimationFrame(g);
                            })(s, function () {
                                Util.addClass(s.morphBg[0], "hide"), (s.morphBg[0].style = ""), Util.removeClass(s.modalContent, "opacity-0");
                            }),
                            (e = s).options.searchData(e.target, function (t) {
                                Util.addClass(e.modalContent, "w-schedule-modal__content--loaded"), (e.modalContent.innerHTML = t);
                            }),
                            o(s, !0);
                    }),
                    s.modal[0].addEventListener("modalIsClose", function (t) {
                        s.modal[0].addEventListener("transitionend", function t(e) {
                            "opacity" == e.propertyName && (c(s), s.modal[0].removeEventListener("transitionend", t));
                        }),
                            (s.target = !1),
                            o(s, !1),
                            f && c(s);
                    }),
                    0 < s.modalCloseBtn.length &&
                    s.modalCloseBtn[0].addEventListener("click", function (t) {
                        s.modal[0].click();
                    }));
        };
        function l(t, e) {
            var s = e.getElementsByTagName("time")[0],
                i = s.getAttribute("datetime"),
                l = r(i.split("PT")[0]),
                n = (function (t) {
                    var e = 0;
                    if (-1 < t.indexOf("H")) {
                        var s = t.split("H");
                        (t = s[1]), (e = parseInt(s[0]));
                    }
                    var i = 0;
                    -1 < t.indexOf("M") && (i = parseInt(t.split("M")[0]));
                    return [e, i];
                })(i.split("PT")[1]),
                a = h(l[0] - t.startTime[0], l[1] - t.startTime[1]),
                o = h(n[0], n[1]);
            e.style.setProperty("--w-schedule-event-top", "calc(var(--w-schedule-row-height) * " + a + ")"),
                e.style.setProperty("--w-schedule-event-height", "calc(var(--w-schedule-row-height) * " + o + ")"),
                (s.innerHTML = d(l) + " - " + d([l[0] + n[0], l[1] + n[1]]));
        }
        function r(t) {
            var e = t.split(":");
            return [parseInt(e[0]), parseInt(e[1])];
        }
        function n(t, e) {
            var s = a(t.startTime[0] + e);
            return t.hourGrid.replace("XXXX", s + ":00");
        }
        function d(t) {
            if (60 <= t[1]) {
                var e = t[1] % 60;
                (t[0] = t[0] + (t[1] - e) / 60), (t[1] = e);
            }
            return (
                a(t[0]) +
                ":" +
                (function t(e) {
                    if (e < 10) return "0" + e;
                    if (60 < e) return t(e - 60);
                    return e;
                })(t[1])
            );
        }
        function a(t) {
            return t < 10 ? "0" + t : 24 < t ? a(t - 24) : t;
        }
        function h(t, e) {
            return 2 * (t + e / 60);
        }
        function o(t, e) {
            0 < t.modalCloseBtn.length && Util.toggleClass(t.modalCloseBtn[0], "w-schedule-close-btn--is-visible", e);
        }
        function c(t) {
            Util.addClass(t.modalContent, "opacity-0"), (t.modalContent.innerHTML = t.skeletonContent), Util.removeClass(t.modalContent, "w-schedule-modal__content--loaded");
        }
        (window.WSchedule = i).defaults = { element: "", searchData: !1 };
        var f = Util.osHasReducedMotion();
    })();
